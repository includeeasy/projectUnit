package org.protege;

import java.applet.Applet;
import java.awt.Window;

import javax.swing.Action;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.SwingUtilities;

import org.protege.editor.owl.OWLEditorKit;
import org.protege.ontograf.actions.ConfigTooltipsAction;
import org.protege.ontograf.actions.ExportImageAction;
import org.protege.ontograf.actions.OpenGraphAction;
import org.protege.ontograf.actions.PinTooltipsAction;
import org.protege.ontograf.actions.SaveGraphAction;
import org.protege.ontograf.common.GraphController;

import edu.umd.cs.piccolo.PCanvas;

public class DemoJApplet  extends JApplet {
	private GraphController graphController;
    /**
     * Initialization method that will be called after the applet is loaded
     * into the browser.
     */
    @Override
    public void init() {
        initComponents();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	graphController = new GraphController(this, new OWLEditorKit());
        jToolBar1 =initToolbar(); //new javax.swing.JToolBar();
        containerPanel = new javax.swing.JPanel();

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        jToolBar1.setRollover(true);
//        jToolBar1.add(new OpenGraphAction(this, graphController));
//        jToolBar1.add(new SaveGraphAction(this, graphController));
//        jToolBar1.add(new ExportImageAction(this, graphController.getGraph().getCanvas()));
        PCanvas canvas = graphController.getGraph().getCanvas();
        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
                containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(containerPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addContainerGap())
            );
            containerPanelLayout.setVerticalGroup(
                containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(containerPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addContainerGap())
            );
        //containerPanel.add(graphController.getGraph().getCanvas());
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                		.addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        //pack();
    }// </editor-fold>
    private JToolBar initToolbar() {
		JToolBar toolBar = graphController.getToolBar();
		
		Window mainWindow = SwingUtilities.windowForComponent(this);
		
		toolBar.addSeparator();
		toolBar.add(new ExportImageAction(mainWindow, graphController.getGraph().getCanvas()));
		toolBar.add(new ConfigTooltipsAction(mainWindow, graphController.getGraph().getCanvas()));
		toolBar.addSeparator();
		toolBar.add(new SaveGraphAction(mainWindow, graphController));
		toolBar.add(new OpenGraphAction(mainWindow, graphController));
		
		Action action = new PinTooltipsAction(mainWindow, graphController);
		JToggleButton btn = new JToggleButton(action);
		btn.setText(null);
		btn.setToolTipText((String) action.getValue(Action.NAME));
		
		toolBar.add(btn);
		return toolBar;
	}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DemoJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel containerPanel;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration
}

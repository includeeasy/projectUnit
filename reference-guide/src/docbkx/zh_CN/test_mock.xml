<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="test_mock">
	<title>Mock plugin for seam forge</title>

	<para>
		The plugin is designed to let programmers write only logic code,
		which automatically generates code
    </para>
	<section>
		<title>Scope</title>
		<para>
			Frameworks are used : JUnit,EasyMock,Mockito,PowerMock.
		</para>
		<para>
			Witch class can be mocked : normal class,static method,singleton
			class.
		</para>
		<para>
			Furthermore, The plugin can generate code for mock
			java.lang.Runtime,javax.persistence.Persistence,and so on.when mock
			those class the plugin generate all code for execute command ,operate
			database,use ftp and so on.
		</para>
	</section>
	<section>
		<title>commands</title>
		<para>Insert mock code into test class.</para>
		<programlisting><![CDATA[mock fromXML|editeXML --file --class]]></programlisting>
		<variablelist>
			<varlistentry>
				<term>fromXML</term>
				<listitem>
					<para>Specify system insert mock code according to a XML file,and
						such you must specify a XML file</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>editXML</term>
				<listitem>
					<para>Popup a swing window that allow you to specify which class to
						be mocked,lastly,ti generate an XML file.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>--file</term>
				<listitem>
					<para>Specify a XML file that list some classes to be mocked</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>--class</term>
				<listitem>
					<para>Full qualified class name to be mocked,generally,produce a
						demo mock files for the class</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section>
		<title>典型测试打桩</title>
		<para>
			它可以帮助维护人员定位问题，在我们公司，分析状态变迁很有用，很多项目都用到了状态机（DRBD，Watchdog，Eucalyptus）。在自动化测试中，有时无法从运行过程中捕获需要的结果，读取日志是个傻瓜办法，但是分析日志又有难度，本工具让日志分析傻瓜化。
			此工具使用命名实体识别技术，然后组合识别出来的命名实体就确定了一条信息。
如果在打印日志信息时能够遵守分析规范，那么所有的日志都是机器可理解的
		</para>
		<para>
		是否可以考虑这两个特性：
1、根据需求搜索插件，例如搜“stub”、“mock”、“analyze log”、“Comman data model”、“面向方面编程”
2、根据现有的代码结构，推荐一些有用的插件，例如：
如果关键字“javax.persistence.persistence”在代码中出现，那么推荐我的插件“flowas-mock”以及它的jpa插件		</para>
	</section>
	<section>
		<title>Demonstrate</title>
		<example>
			<title>Insert code to an exist test class</title>
			<para>We mock java.io.File,java.lang.Runtime and
				javax.persistence.Persistence(That is mock an database),suppose we
				has an xml file named "demo.xml" and it's context is the following:
			</para>
			<programlisting><![CDATA[<root>
	<test-class>net.flowas.demo.MyTest</test-class>
	<system-under-test>
	</system-under-test>
	<depend-on-component>	    
		<class name="java.io.File">
			<method>exists()</method>
		</class>		
		<class name="java.lang.Runtime">
		    <method>exec(java.lang.String)</method>
		</class>
		<class name="javax.persistence.Persistence">
		    <method>createEntityManagerFactory(java.lang.String)</method>
		</class>-->
	</depend-on-component>
</root>]]></programlisting>
		</example>
		<para>
			<figure>
				<title>We create a project that named "mockapp"</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="resources/images/mockcommand.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<figure>
				<title>That produces some files as following</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="resources/images/mockapp.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<figure>
				<title>Execute "mock fromXML --file demo.xml" and now produces many
					files</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="resources\images\console.png" />
					</imageobject>
				</mediaobject>
			</figure>
			Finally,three test class are generated:
			<simplelist>
				<member>net.flowas.demo.MyTest</member>
				<member>net.flowas.template.mock.persistence.EntityMockTest</member>
				<member>net.flowas.template.mock.runtime.TestUsesRuntime</member>
			</simplelist>
		</para>
	</section>
	<section>
		<title>Use code generation in IDE</title>
		<para>Run launcher.Main ,and import generated project as maven project
		</para>
		<para>Create a test class named "net.flowas.demo.MyTest",</para>
		<para>
			<programlisting><![CDATA[import java.io.File;
import java.io.InputStream;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import junit.framework.Assert;
import org.junit.Before;
import org.junit.Test;
public class MyTest {
	@Before
	public void setUp() throws Exception {			
	}
	@Test
	public void hello() throws Exception {
		File file = new File(".");
		Assert.assertFalse(file.exists());
		Process process = Runtime.getRuntime().exec("ant --verrsion");
		InputStream in = process.getInputStream();
		byte[] b = new byte[in.available()];
		in.read(b);
		Assert.assertEquals("1.8.1", new String(b));
		EntityManagerFactory emf = Persistence
				.createEntityManagerFactory("ggfortest");
		EntityManager em = emf.createEntityManager();
		List list = em.createQuery("select u from User as u").getResultList();
		Assert.assertTrue(list.size()>0);
	}
}]]></programlisting>
		</para>
		<figure>
			<title>Now you run "MyTest" as JUnit bound to fail</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="resources/images/myTestFailed.png" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Execute "mock fromXML --file demo.xml" and reopen
			"net.flowas.demo.MyTest"</para>
		<para>
			<programlisting><![CDATA[import java.io.File;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import junit.framework.Assert;
import net.flowas.template.mock.persistence.DataInitializer;
import net.flowas.template.mock.runtime.CommandFilter;
import net.flowas.template.mock.runtime.ProcessMock;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.powermock.api.easymock.PowerMock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ File.class,Persistence.class })
public class MyTest {
	@Before
	public void setUp() throws Exception {		
		Method method = PowerMock.method(Persistence.class,
				"createEntityManagerFactory", String.class);
		Method expectedMethod = PowerMock.method(DataInitializer.class,
				"createEntityManagerFactory", String.class);
		PowerMock.replace(method).with(expectedMethod);
		PowerMock.replayAll();
		InputStream in = this.getClass().getResourceAsStream("/data.xml");
		DataInitializer.insert(in);
		PowerMockito.mockStatic(Runtime.class);
		Runtime mockedRuntime = PowerMockito.mock(Runtime.class);
		PowerMockito.when(Runtime.getRuntime()).thenReturn(mockedRuntime);
		final CommandFilter commandFilter = new CommandFilter() {
			@Override
			public String[] exec(String command) {
				if (command.equals("ant --verrsion")) {
					return new String[] { "1.8.1", "" };
				}
				return null;
			}
		};
		Answer<Process> answer = new Answer<Process>() {
			@Override
			public Process answer(InvocationOnMock invocation) throws Throwable {
				return new ProcessMock((String) invocation.getArguments()[0],
						commandFilter);
			}
		};
		PowerMockito.when(mockedRuntime.exec(Mockito.anyString())).thenAnswer(
				answer);
		Answer<File> answerFile = new Answer<File>() {
			@Override
			public File answer(InvocationOnMock invocation) throws Throwable {
				Object[] arguments = invocation.getArguments();
				File mockFile = new File((java.lang.String) arguments[0]);
				File spy = PowerMockito.spy(mockFile);
				PowerMockito.when(spy.exists()).thenReturn(false);
				return spy;
			}
		};
		PowerMockito.whenNew(File.class).withArguments(Mockito.anyString())
				.thenAnswer(answerFile);
	}

	@Test
	public void hello() throws Exception {
		File file = new File(".");
		Assert.assertFalse(file.exists());
		Process process = Runtime.getRuntime().exec("ant --verrsion");
		InputStream in = process.getInputStream();
		byte[] b = new byte[in.available()];
		in.read(b);
		Assert.assertEquals("1.8.1", new String(b));
		EntityManagerFactory emf = Persistence
				.createEntityManagerFactory("ggfortest");
		EntityManager em = emf.createEntityManager();
		List list = em.createQuery("select u from User as u").getResultList();
		Assert.assertTrue(list.size()>0);
	}
}]]></programlisting>
		</para>
		<figure>
			<title>Now you run "MyTest" as JUnit likely to be successful</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="resources/images/myTestSucceed.png" />
				</imageobject>
			</mediaobject>
		</figure>
	</section>
</chapter>
